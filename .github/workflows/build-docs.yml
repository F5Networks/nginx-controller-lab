# This is a basic workflow to help you get started with Actions

name: Build Docs
on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
    ignore-tags:
      - "*"
  schedule:
    - cron: "0 0 1 * *"

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Build project # This would actually build your project
        run: |
          set -x
          COMMAND="make -C docs clean html"
          . ./containthedocs-image
          docker run --rm -t -v "$PWD":"$PWD" --workdir "$PWD" ${DOCKER_RUN_ARGS} -e "LOCAL_USER_ID=$(id -u)" ${DOC_IMG} ${COMMAND}
          sudo tar -zcf docs.tar.gz ./docs/_build/html
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: 1.0.${{ GITHUB_RUN_NUMBER }}
          release_name: Release 1.0.${{ GITHUB_RUN_NUMBER }}
          draft: false
          prerelease: false
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./docs.tar.gz
          asset_name: docs.tar.gz
          asset_content_type: application/gzip